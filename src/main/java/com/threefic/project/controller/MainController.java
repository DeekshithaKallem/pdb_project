package com.threefic.project.controller;

import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.threefic.project.models.Course;
import com.threefic.project.models.Student;
import com.threefic.project.utils.CourseRepository;
import com.threefic.project.utils.StudentRepository;

@RestController // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private StudentRepository studentRepository;
  
  @Autowired
  private CourseRepository courseRepository;

//  @PostMapping(path="/addStudent") // Map ONLY POST Requests
//  public @ResponseBody String addNewStudent (@RequestParam String firstname, @RequestParam String lastname, @RequestParam String department,
//		  @RequestParam String dateOfBirth, @RequestParam String mailId) {
//    // @ResponseBody means the returned String is the response, not a view name
//    // @RequestParam means it is a parameter from the GET or POST request
//
//    Student stud = new Student();
//    stud.setFirstname(firstname);
//    stud.setLastname(lastname);
//    stud.setDepartment(department);
//    stud.setDateOfBirth(dateOfBirth);
//    stud.setMailId(mailId);
//    studentRepository.save(stud);
//    return "Saved";
//  }

  @RequestMapping(value = "/save", method = RequestMethod.POST)
  public RedirectView saveProduct(Model model, @ModelAttribute Student student) {
      studentRepository.save(student);
      return new RedirectView("/home");
  }
  
  @GetMapping(path="/addStudent")
  public ModelAndView addNewStudent(Model model) {
	  Student student = new Student();
	  model.addAttribute(student);
	  
	  ModelAndView view = new ModelAndView();
	  view.setViewName("addStudentForm");
	  return view;
  }
  
  @GetMapping(path="/all")
  public @ResponseBody Iterable<Student> getAllUsers() {
    // This returns a JSON or XML with the users
    return studentRepository.findAll();
  }
  
  @RequestMapping(path="/home")
  public ModelAndView viewHomePage(Model model) {
	  Iterable<Student> students = studentRepository.findAll();
	  for(Student student: students) {		 
		  Set<Course> courses = studentRepository.findCoursesByStudentId(student.getStudentId());
		  StringBuilder listCourses = new StringBuilder();
		  for(Course course : courses) {
			  listCourses.append(course.getCourseName() + " ( " + course.getCourseId() + " ),");
		  }
		  if(listCourses.length() != 0)
			  listCourses.deleteCharAt(listCourses.length() - 1);
		  student.setCoursesEnrolled(listCourses.toString());
	  }
	  model.addAttribute("students", students);	
	  ModelAndView modelAndView = new ModelAndView();
	   modelAndView.setViewName("index");
	  return modelAndView;
  }
  
  @RequestMapping(path="/edit/{studentId}")
  public ModelAndView editPage(@PathVariable(name = "studentId") Integer id) {
	  ModelAndView mav = new ModelAndView("editPage");
	    Student stud = studentRepository.findByStudentId(id);
	    mav.addObject("student", stud);
	    return mav;
  }
  
  @RequestMapping(path="/delete/{studentId}")
  public RedirectView deleteStudent(@PathVariable(name = "studentId") Integer id) {
	    studentRepository.deleteById(id);
	    return new RedirectView("/home");
  }
  
  @RequestMapping(path="/enroll")
  public ModelAndView enrollInCourse(Model model) {
	  ModelAndView view = new ModelAndView();
	  view.setViewName("enrollForm");
	  return view;
  }
  
  @RequestMapping(path="/listCourses")
  public ModelAndView listCourses(Model model) {	
	  Iterable<Course> courses = courseRepository.findAll();
	  for(Course course: courses) {
		  course.setProfessors(courseRepository.findProfessorByCourseId(course.getCourseId()));
		  course.setClassrooms(courseRepository.findClassroomByCourseId(course.getCourseId()));
	  }
	  model.addAttribute("courses", courses);
	  ModelAndView view = new ModelAndView();
	  view.setViewName("listCourses");
	  return view;
  }
  
  
  
  
}